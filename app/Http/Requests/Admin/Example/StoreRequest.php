<?php

namespace App\Http\Requests\Admin\Example;

use Illuminate\Contracts\Validation\Validator;
use Illuminate\Foundation\Http\FormRequest;
use Illuminate\Http\Exceptions\HttpResponseException;

class StoreRequest extends FormRequest
{
    /**
     * Determine if the user is authorized to make this request.
     *
     * @return bool
     */
    public function authorize()
    {
        return true;
    }

    /**
     * Get the validation rules that apply to the request.
     *
     * @return array<string, mixed>
     */
    public function rules()
    {
        return [
            'title' => 'required',
        ];
    }

    /**
     * Get the error messages for the defined validation rules.
     *
     * @return array
     */
    public function messages()
    {
        return [
            'title.required' => '请补充标题',
        ];
    }

    /**
     * Configure the validator instance.
     *
     * @param  \Illuminate\Validation\Validator  $validator
     * @return void
     */
    public function withValidator($validator)
    {
        // 补充校验
//        $validator->after(function ($validator) {
//            if ($this->get('content') != '你好') {
//                $validator->errors()->add('content', '你好 Something is wrong with this field!');
//            }
//        });
    }

    // 定义提前返回，不走全局参数校验异常错误处理
//    public function failedValidation(Validator $validator)
//    {
//        // 1. 提前返回，直接返回
////        return response()->json([
////            'msg' => 'request 校验中拦截',
////        ])->send();
//
//        // 2. 异常形式返回，抛出异常
////        throw new HttpResponseException(response()->json([
////            'code' => 100,
////            'msg' => $validator->errors()->first(),
////        ], 422));
//
////        parent::failedValidation($validator); // TODO: Change the autogenerated stub
//    }
}
